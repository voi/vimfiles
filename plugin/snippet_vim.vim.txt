" vim: ft=vim
function! SnippetVim_Evaluate(expr) abort "{{{
  try
    return eval(a:expr)
  catch
    return a:expr
  endtry
endfunction "}}}

function! SnippetVim_ParseSnipptes(path, includes) abort "{{{
  let snips = {}
  let last_key = ''
  let indent = ''

  for line in readfile(expand(a:path))
    " snippet syntax
    if line =~# '^snippet\s\+\S\+'
      let last_key = get(matchlist(line, '^snippet\s\+\(\S\+\)'), 1, '')
      let snips[last_key] = []
      let indent = ''

    " snippet lines
    elseif line =~# '^\s\+.*'
      if indent ==# ''
        let indent = matchstr(line, '^\s\+')
      endif

      call add(get(snips, last_key, []), get(matchlist(line, printf('^%s\(.*\)', indent)), 1, ''))

    " include other snippets
    elseif line =~# '^include\s\+\S\+'
      call add(a:includes, get(matchlist(line, '^include\s\+\(\S\+\)'), 1, ''))

    endif
  endfor

  return snips
endfunction "}}}

function! SnippetVim_CountHolder(line, holder) abort "{{{
  let start = 0

  while match(a:line, '${\d\+.\{-}}', start) >= 0
    let a:holder.marks += 1
    let start = matchend(a:line, '${\d.\{-}}', start) + 1
  endwhile
endfunction "}}}

function! SnippetVim_MakeSnippets(lines, holder) abort "{{{
  let pos = getpos('.')

  " indent each snippet lines
  let indent = matchstr(strpart(getline('.'), 0, pos[2] + pos[3]), '^\s\+')
  let snip = join(copy(a:lines), "\n" . indent)

  " eval inline script codes
  let snip = substitute(snip, '\${`\(.\{-}\)`}', '\=SnippetVim_Evaluate(submatch(1))', 'g')
  let snip = substitute(snip, '`\(.\{-}\)`', '\=SnippetVim_Evaluate(submatch(1))', 'g')

  call SnippetVim_CountHolder(snip, a:holder)

  return snip
endfunction "}}}

function! SnippetVim_Expand() abort "{{{
  let line = getline('.')
  let pos = getpos('.')

  if len(line) > (pos[2] + pos[3])
    let head = strpart(line, 0, pos[2] + pos[3] - 1)

  else
    let head = line

  endif

  let l:word = matchstr(head, '\S\+$')
  echomsg l:word

  if l:word !=# ''
    let sn = get(b:, 'snip_dict', {})

    if has_key(sn, l:word)
      let pos[2] = match(head, '\S\+$') + 1

      call setpos('.', pos)

      "
      let b:holder = { 'marks': 0, 'beginl': pos[1], 'endl': pos[1] + len(sn[l:word]) - 1 }

      let old = @0
      let @0 = SnippetVim_MakeSnippets(sn[l:word], b:holder)

      execute printf('normal v%dl', len(substitute(l:word, '.', '.', 'g')) - 1)
      execute 'normal "0gp'

      let @0 = old

      call setpos('.', pos)
    endif
  endif

  call SnippetVim_JumpToMark()
endfunction "}}}

function! SnippetVim_CacheSnippets(source_pathes, cache_dir, type, force) abort
  let l:cache_path = printf('%s%s.snip.cache', a:cache_dir, a:type)

  if filereadable(l:cache_path) && !a:force
    return eval(join(readfile(l:cache_path), ''))
  else
    let l:snip_pathes = []

    for l:path in a:source_pathes
      let l:snip_pathes += globpath(l:path, printf('%s.snip', a:type), 0, 1)
      let l:snip_pathes += globpath(l:path, printf('%s/*.snip', a:type), 0, 1)
    endfor

    let l:snippets = {}

    for l:path in l:snip_pathes
      let l:includes = []

      call extend(l:snippets, SnippetVim_ParseSnipptes(l:path, l:includes))

      for l:inc_name in l:includes
        let l:inc_path = printf('%s/%s', fnamemodify(l:path, ':p:h'), l:inc_name)

        if filereadable(l:inc_path)
          call extend(l:snippets, SnippetVim_ParseSnipptes(l:inc_path, []))
        endif
      endfor
    endfor

    call writefile([string(l:snippets)],  l:cache_path)
    call writefile(sort(keys(l:snippets)), printf('%s%s.snip.dict', a:cache_dir, a:type))

    return l:snippets
  endif
endfunction

function! SnippetVim_AddDictionary(cache_path, type) abort
  execute printf('setlocal dictionary^=%s%s.snip.dict', a:cache_path, a:type)
endfunction

function! SnippetVim_GetCacheDirectory() abort "{{{
  return fnamemodify(expand(
      \ get(g:, 'simple_snippet#snippet_cache_directory', '~/.simple_snippet')), ':p')
endfunction "}}}

function! SnippetVim_OnFileType(force, path) abort "{{{
  let l:bufnr = bufnr(fnamemodify(expand(a:path), ':p'))

  " don't expand snippets for non-editable buffer
  if !bufexists(l:bufnr) || !buflisted(l:bufnr) ||
      \ !getbufvar(l:bufnr, '&modifiable') || getbufvar(l:bufnr, '&readonly')
    return
  endif

  let l:file_type = &filetype

  if !a:force && has_key(b:, 'snip_dict') && has_key(b:snip_dict, l:file_type)
    return
  endif

  let l:cache_path = SnippetVim_GetCacheDirectory()

  if !isdirectory(l:cache_path)
    call mkdir(l:cache_path, 'p')
  endif

  let b:snip_dict = {}

  let l:snip_dirs = filter(map(copy(get(g:, 'simple_snippet#snippet_directories', [])),
      \ 'fnamemodify(expand(v:val), ":p")'),
      \ 'isdirectory(v:val)')

  call extend(b:snip_dict, SnippetVim_CacheSnippets(l:snip_dirs, l:cache_path, '_', a:force))
  call SnippetVim_AddDictionary(l:cache_path, '_')

  if l:file_type !=# ''
    call extend(b:snip_dict, SnippetVim_CacheSnippets(l:snip_dirs, l:cache_path, l:file_type, a:force))
    call SnippetVim_AddDictionary(l:cache_path, l:file_type)
  endif
endfunction "}}}

function! SnippetVim_JumpToMark() abort "{{{
  let holder = get(b:, 'holder', { 'marks': 0, 'beginl': 0, 'endl': 0 })

  if holder.beginl <= 0 || holder.endl <= 0
    return
  endif

  let pos = getpos('.')

  if pos[1] < holder.beginl || holder.endl < pos[1]
    return
  endif

  if b:holder.marks <= 0
    return
  endif

  call cursor(b:holder.beginl, 1)

  for num in range(1, b:holder.marks) + [ 0 ]
    let l:pat = printf('$\({%d.\{-}}\|%d\)', num, num)
    let l:lnum = search(l:pat, 'zW', b:holder.endl)

    if l:lnum > 0
      let l:line = getline(l:lnum)

      if matchend(l:line, l:pat) >= len(l:line)
        execute 'normal "_c$'
        execute 'normal $'
      else
        let l:length = len(
            \ substitute(matchstr(l:line, l:pat), '.', '.', 'g'))

        execute printf('normal "_%dx', l:length)
      endif

      return
    endif
  endfor

  call cursor(pos[1], pos[2])
endfunction "}}}

function! SnippetVim_AllClear() abort
  let l:cache_path = SnippetVim_GetCacheDirectory()

  if isdirectory(l:cache_path)
    for l:cache in globpath(l:cache_path, '*', 0, 1)
      call delete(l:cache)
    endfor
  endif
endfunction

function! SnippetVim_Remake() abort "{{{
  call SnippetVim_OnFileType(1, bufname('%'))
endfunction "}}}


augroup plugin-snippet-vim-event
  autocmd!
  autocmd FileType * call SnippetVim_OnFileType(0, '<afile>')
augroup END

inoremap <C-f> <C-o>:call SnippetVim_Expand()<CR>

command! SnippetVimAllClear call SnippetVim_AllClear()
command! SnippetVimRemake   call SnippetVim_Remake()

